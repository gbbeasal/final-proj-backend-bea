// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======== CREATING MODEL ========:
// model Author {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   firstName     String
//   lastName      String
//   books         Book[]   @relation("AuthorBook")
// }

// model Book {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   title         String
//   subtitle      String
//   published     DateTime
//   publisher     String
//   pages         Int
//   description   String
//   website       String
//   authorId      Int
//   author        Author        @relation("AuthorBook", fields: [authorId], references: [id], onDelete: Cascade)
//   genres        BookGenre[]   @relation("BookBookGenre")
// }
// //^^^ author attribute of type Author, yung @relation is key to use as reference
// // authorId = foreign key bc it refers to a foreign model/table


// // ============ EXTRA: MANY TO MANY RELATIONSHIPS ============:
// // join table si BookGenre (join table = combi of names nung 2 tables)
// model BookGenre {
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   bookId        Int
//   book          Book @relation("BookBookGenre", fields: [bookId], references: [id], onDelete: Cascade)
//   genreId       Int
//   genre         Genre @relation("GenreBookGenre", fields: [genreId], references: [id]) 
//   @@id([bookId, genreId]) // combines the id of bookId and genreId into 1 id
//                           // need for prisma to understand you're making MANY-TO-MANY tables
// }

// // kase there are many kinds of genres and also books can have many genres
// model Genre {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   title         String
//   books         BookGenre[] @relation("GenreBookGenre")
// }

//======================

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firstName   String
  lastName    String
  userName    String    @unique
  password    String
  email       String    @unique // If you create a user with the same email, prisma will prevent that
  bio         String?
  tweet       Tweet[]   @relation("UserTweet")
  birthday    String
}

model Tweet {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  content       String
  likes         Int       @default(0)
  userId        Int
  user          User      @relation("UserTweet", fields: [userId], references: [id], onDelete: Cascade)
}