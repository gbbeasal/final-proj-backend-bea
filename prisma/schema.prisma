// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//======================
// 1 user = many tweets, 1 user = many replies, 1 user = many favorites
//======================
model User {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  firstName   String
  lastName    String
  userName    String          @unique
  password    String
  email       String          @unique // If you create a user with the same email, prisma will prevent that
  bio         String?
  tweet       Tweet[]         @relation("UserTweet")
  reply       Reply[]         @relation("UserReply")
  favorite    Favorite[]      @relation("UserFavorite")
  birthday    String
  followers   Follow[]        @relation("UserFollower")
  following   Follow[]       @relation("UserFollowing")
}

//======================
// 1 tweet = many replies
//======================
model Tweet {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  content       String
  userId        Int
  user          User          @relation("UserTweet", fields: [userId], references: [id], onDelete: Cascade)
  reply         Reply[]       @relation("TweetReply")
  favorite      Favorite[]    @relation("TweetFavorite")
}

model Reply {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  content       String
  tweetId       Int
  tweet         Tweet         @relation("TweetReply", fields: [tweetId], references: [id], onDelete: Cascade)
  userId        Int
  user          User          @relation("UserReply", fields: [userId], references: [id], onDelete: Cascade)
}

// need to use @@id to define ID with multiple fields
model Favorite {
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tweetId       Int
  tweet         Tweet         @relation("TweetFavorite", fields: [tweetId], references: [id], onDelete: Cascade)
  userId        Int
  user          User          @relation("UserFavorite", fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, tweetId])
}

model Follow {
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  followerId    Int
  follower      User          @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId    Int
  following      User         @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  @@id([followerId, followingId])
}

